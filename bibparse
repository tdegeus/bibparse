#!/usr/bin/env python3
"""bibparse
  Parse a BibTeX library, stripping it from unnecessary fields, and unifying
  the formatting of authors. Additionally this script can be used to perform
  some basic checking of the library.

Usage:
  bibparse [options] <input> <output>

Arguments:
  input               Input BibTeX-file.
  output              Output file, or path (the "input" file-name is copied).

Options:
  -h --help           Show help.
  --version           Show version.
  --author-sep=<str>  Character to separate authors' initials. [default: ]
  --ignore-case       Do not protect case of title.
  --ignore-math       Do not apply math-mode fix.
  --doi-to-url        Convert doi to url.

Checks:
  --check-authors     Check for duplicate authors.
  --check-keys        Check keys for author + year construction.

Copyright:
  T.W.J. de Geus
  tom@geus.me
  www.geus.me
"""

# ==============================================================================

from docopt import docopt
import os,re,sys
import bibtexparser
from bibtexparser.bparser       import BibTexParser
from bibtexparser.customization import homogeneize_latex_encoding

# ==============================================================================

# parse command-line options/arguments
args = docopt(__doc__,version='1.3.1')

# check if the input-file exists
if not os.path.isfile(args['<input>']):
  raise IOError('<input> file does not exist')

# check is the file is an existing directory, otherwise convert to file with
# name the filename of the input file
if os.path.isdir(args['<output>']):
  args['<output>'] = os.path.join(args['<output>'],os.path.split(args['<input>'])[-1])

# ==============================================================================

# list to decode certain unicode symbols to parse to LaTeX
# NB list not exhaustive, please extend!
decode = {
  u'ç' : r'\c{c}',
  u'è' : r'\`{e}',
  u'é' : r'\'{e}',
  u'ë' : r'\"{e}',
  u'ö' : r'\"{o}',
  u'ü' : r'\"{y}',
  u'g̃' : r'\~{g}',
  u'ñ' : r'\~{n}',
  u'İ' : r'\.{I}',
  u'ă' : r'\v{a}',
  u'ř' : r'\v{r}',
  u'–' :  '--',
  u'—' :  '--',
  u'“' :  '``',
  u'”' :  "''",
  u'×' : r'$\times$',
}

# function to do repeated substitution;
# arguments: "func" = lambda function, "txt" = string)
def repsub(func,txt):
  n = 1
  while n:
    txt,n = func(txt)
  return txt

# read input-file
parser = BibTexParser()
bib    = bibtexparser.load(open(args['<input>'],'r'), parser=parser)

# initiate list to check for duplicates in author storage, and the citation keys
dupl = {}
keys = {}

# loop over all entries
for entry in bib.entries:

  # ----------------------------------------------------------------------------
  # author abbreviations
  # ----------------------------------------------------------------------------

  # replace first names -> abbreviated names
  for key in ['author','editor']:
    if key in entry:
      # - split authors
      authors = entry[key].split(' and ')
      # - loop over authors and edit
      for i,author in enumerate(authors):
        if len(author.split(','))>1:
          # -- update name
          last,first = author.split(',')
          first      = first.replace('.','. ')
          first      = re.sub(re.compile(r'(.*)(\(.*\))'                        ,re.UNICODE),r'\1'                           ,first)
          first      = re.sub(re.compile(r'([A-Za-z])([\w0-9\{\}\'\"\\\.\^\{]*)',re.UNICODE),r'\1.'                          ,first)
          first      = re.sub(re.compile(r'([A-Za-z\.][\-]?)([\ ]*)'            ,re.UNICODE),r'\1'                           ,first).upper().replace(' ','')
          first      = re.sub(re.compile(r'([A-Za-z\.][\-]?)([A-Za-z])'         ,re.UNICODE),r'\1'+args['--author-sep']+r'\2',first)
          name       = last+', '+first+'\\'
          # -- check if the author was stored in the same way before,
          # -- if not: mark as (possible) duplicate
          if   name   not in dupl      : dupl[name]  = [author]
          elif author not in dupl[name]: dupl[name] += [author]
          # -- store new name
          authors[i] = name
      # - store in "entry"
      entry[key] = ' and '.join(authors)

  # ----------------------------------------------------------------------------
  # title: respect case, fix math mode
  # ----------------------------------------------------------------------------

  # modify bib-file to protect the case of the title [default]
  if not args['--ignore-case']:
    if 'title' in entry:
      entry['title'] = ('{'+entry['title']+'}').replace('{{{','{{').replace('}}}','}}')

  # protect math mode [default]
  if not args['--ignore-math']:
    if 'title' in entry:
      if len(entry['title'].split('{\$}'))>=3:
        title = entry['title']
        title = repsub(lambda txt: re.compile(r'(\{\\\$\})(.*)(\{\\\$\})'     ,re.UNICODE).subn(r'$\2$'      ,txt),title)
        title = repsub(lambda txt: re.compile(r'(\$\$)(.*)(\$\$)'             ,re.UNICODE).subn(r'$\2$'      ,txt),title)
        title = repsub(lambda txt: re.compile(r'(\$)(.*)(\{\\{\})(.*)(\$)'    ,re.UNICODE).subn(r'\1\2{\4\5' ,txt),title)
        title = repsub(lambda txt: re.compile(r'(\$)(.*)(\{\\}\})(.*)(\$)'    ,re.UNICODE).subn(r'\1\2}\4\5' ,txt),title)
        title = repsub(lambda txt: re.compile(r'(\$)(.*)(\{\\_\})(.*)(\$)'    ,re.UNICODE).subn(r'\1\2_\4\5' ,txt),title)
        title = repsub(lambda txt: re.compile(r'(\$)(.*)(\{\\^\})(.*)(\$)'    ,re.UNICODE).subn(r'\1\2^\4\5' ,txt),title)
        title = repsub(lambda txt: re.compile(r'(\$)(.*)(\\backslash)(.*)(\$)',re.UNICODE).subn(r'\1\2\\\4\5',txt),title)
        entry['title'] = title

  # ----------------------------------------------------------------------------
  # basic fixing
  # ----------------------------------------------------------------------------

  # remap certain unicode symbols parsed incorrectly (see above)
  for key in ['author','editor','title']:
    if key in entry:
      for inp in decode:
        entry[key] = entry[key].replace(inp,decode[inp])

  # ----------------------------------------------------------------------------
  # remove unrelevant fields
  # ----------------------------------------------------------------------------

  # basic fields (common for all)
  base = ['ID','ENTRYTYPE','author','title','year']

  # set fields to select (if present)
  if   entry['ENTRYTYPE']=='article'      : fields = ['journal'                        ,'volume','number','pages','doi','eprint'      ]+base
  elif entry['ENTRYTYPE']=='inproceedings': fields = ['booktitle','editor' ,'publisher','volume','number','pages','doi','eprint'      ]+base
  elif entry['ENTRYTYPE']=='book'         : fields = ['edition'  ,'editor' ,'publisher','isbn'                   ,'doi','eprint'      ]+base
  elif entry['ENTRYTYPE']=='inbook'       : fields = ['edition'  ,'editor' ,'publisher','isbn'                   ,'doi','eprint'      ]+base
  elif entry['ENTRYTYPE']=='incollection' : fields = ['booktitle','edition','publisher','isbn'                   ,'doi','eprint'      ]+base
  elif entry['ENTRYTYPE']=='phdthesis'    : fields = ['school'                         ,'isbn'                   ,'doi','eprint','url']+base
  elif entry['ENTRYTYPE']=='techreport'   : fields = ['institution'                    ,'isbn'                   ,'doi','eprint','url']+base
  elif entry['ENTRYTYPE']=='misc'         : fields = [                                                            'doi','eprint','url']+base
  else: print('Undefined entry '+entry['ENTRYTYPE']); sys.exit(1)

  # rename "link"->"url" ("url" is changed to "link" by bibtexparser)
  if 'link' in entry:
    if 'url' in entry:
      raise IOError('Conflict between link and url')
    entry['url'] = entry['link']
    del entry['link']

  # ensure at least one digital reference
  if 'url' not in fields:
    if 'doi' not in entry and 'eprint' not in entry:
      fields.append('url')

  # remove all fields that are not specified above
  rm = [key for key in entry if key not in fields]
  for key in rm:
    del entry[key]

  # journal abbreviations: reduce space after "." by replacing "." with ".\"
  if 'journal' in entry:
    entry['journal'] = entry['journal'].replace('. ','.\\ ')

  # remove link if doi or eprint is available
  if 'url' in entry and ('doi' in entry or 'eprint' in entry):
    del entry['url']

  # fix underscore problems in doi and url
  if 'doi' in entry: entry['doi'] = entry['doi'].replace('_','\_').replace('{\\\\_}','\_').replace('{\\_}','\_').replace('{\_}','\_')
  if 'url' in entry: entry['url'] = entry['url'].replace('{\_}','\_').replace('{\\_}','\_').replace('{~}','~').replace(r'\&','&')
  if 'url' in entry: entry['url'] = repsub(lambda txt: re.compile(r'({)([^}])(})',re.UNICODE).subn(r'\2',txt),entry['url'])

  # Parse DOI into an URL
  if '--doi-to-url' in args and 'doi' in entry:
    entry['url'] = 'http://dx.doi.org/' + entry['doi']
    del entry['doi']

  # ----------------------------------------------------------------------------
  # auto-construct citation key
  # ----------------------------------------------------------------------------

  if args['--check-keys']:

    # functions to replace accents to letters
    repl = [\
      lambda name: re.sub(r"([a-zA-Z]?)(\{\\[a-z\~\'\"\`]\{)([a-zA-Z])(\}\})([a-zA-Z]?)",r'\1\3\5',name),\
      lambda name: re.sub(r"([a-zA-Z]?)(\\[a-z\~\'\"\`]\{)([a-zA-Z])(\})([a-zA-Z]?)"    ,r'\1\3\5',name),\
      lambda name: name.replace(r'{\o}' ,'o'),\
      lambda name: name.replace(r'{\aa}','a'),\
    ]

    # select author, and if not present editor
    if   'author' in entry: key = 'author'
    elif 'editor' in entry: key = 'editor'

    # no author/editor -> no default construction
    if not (key in entry and 'year' in entry):
      keys[entry['ID']] = entry['ID']
    # default construction
    else:
      authors = entry[key].split(' and ')
      if len(authors[0].split(','))>1:
        # use last name (without spaces) of first author
        last,_ = authors[0].split(',')
        last   = last.replace(' ','')
        # remove accents from characters
        for func in repl:
          while last!=func(last):
            last = func(last)
        # remove case-force for BibTeX
        last = re.sub(r'(.*)(\{)(.*)(\})(.*)',r'\1\3\5',last)
        # remove accent
        last = last.replace("'",'')
        # force first letter to be upper-case
        last = last[0].upper()+last[1:]
        # store constructed key
        keys[entry['ID']] = last+entry['year']

# end for entry in bib.entries:

# store the reduced file
open(args['<output>'],'w').write(bibtexparser.dumps(bib))

# ==============================================================================
# print possible duplicates in author storage
# ==============================================================================

if args['--check-authors']:
  # - read length of longest name, to align in columns
  N = 0
  for name in sorted(dupl):
    if len(dupl[name])>1:
      N = max(N,len(name))
  fmt = '%-'+str(N)+'s'
  # - print
  for name in sorted(dupl):
    if len(dupl[name])>1:
      print(fmt%name,dupl[name])

# ==============================================================================
# print possible key changes
# ==============================================================================

if args['--check-keys']:

  # append citation keys with "a", "b", "c", etc. in the case of new duplicates
  appendix = ['','a','b','c','d','e','f','g','h','i']
  newkeys  = [keys[key] for key in sorted(keys)]
  for key in sorted(keys):
    for ex in appendix[1:]:
      if key[-1]==ex:
        for letter in appendix:
          if keys[key]+letter not in newkeys:
            keys[key] = keys[key]+letter
            newkeys   = [keys[key] for key in sorted(keys)]
            break

  # print changes
  N = 0
  for key in keys:
    if key!=keys[key]:
      N = max(N,len(key))
  for key in sorted(keys):
    if key!=keys[key]:
      print(('{0:'+str(N)+'s} -> '+'{1:s}').format(key,keys[key]))
